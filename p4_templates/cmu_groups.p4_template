#ifndef _CMU_GROUP_P4_
#define _CMU_GROUP_P4_

#include "headers.p4"

/** Below are all definitions of CMU-Groups */

{# Two flags used to implement standard metadatas in fragmentation way. #}
{%for CMUG in CMUG_GROUP_CONFIGS %}
// Definition for CMU-Group{{CMUG.id}}

{% set ns = namespace(gid=0) %}
{% set ns.gid = CMUG.id %}
{% if ns.gid == 9 %}
// CMU_Group 9 reuses the metadata of CMU Group 5.
//   a) Chain the two groups to enable inter-group collaboration.
//   b) Reuse PHV bits. 
{% set ns.gid = 5 %}
{% endif %}

{%if CMUG.type == 1 %}
control CMU_Group{{CMUG.id}} ( in header_t hdr,
                               in ingress_intrinsic_metadata_t intr_md,
                               inout ingress_metadata_t meta )
{% else %}
control CMU_Group{{CMUG.id}} ( in header_t hdr,
                               in egress_intrinsic_metadata_t intr_md,
                               inout egress_metadata_t meta )
{% endif %}
{
    action no_action(){}

    // Definition for Shared Compresstion Stage.
    {%if CMUG.type == 1 %}
    Hash<bit<16>>(HashAlgorithm_t.CRC32) hash_unit1;
    Hash<bit<16>>(HashAlgorithm_t.CRC32) hash_unit2;
    Hash<bit<16>>(HashAlgorithm_t.CRC32) hash_unit3;
    {% else %}
    Hash<bit<32>>(HashAlgorithm_t.CRC32) hash_unit1;
    Hash<bit<16>>(HashAlgorithm_t.CRC32) hash_unit2;
    {% endif %}

    // The hash inputs are fixed here. There are two ways to generate different hash values.
    //  a) Firstly, use different sub-range in the initialization stage.
    //  b) Secondly, add salts to hash outputs in the control plane.
    action hash1(){
        meta.cmu_group{{ns.gid}}.compressed_key1 = hash_unit1.get({ {{",".join(CMUG.candidate_key_list.keys())}} });
    }
    action hash2(){
        meta.cmu_group{{ns.gid}}.compressed_key2 = hash_unit2.get({ {{",".join(CMUG.candidate_key_list.keys())}} });
    }
    {%if CMUG.type == 1 %}
    action hash3(){
        meta.cmu_group{{ns.gid}}.compressed_key3 = hash_unit3.get({ {{",".join(CMUG.candidate_key_list.keys())}} });
    }
    {% endif %}

    {%if CMUG.mau_start >= 0%}
    @pragma stage {{CMUG.mau_start}}
    {%endif%}
    table tbl_hash1{
        actions = {
            hash1;
        }
        const default_action = hash1(); 
        size = 1;
    }
    {%if CMUG.mau_start >= 0%}
    @pragma stage {{CMUG.mau_start}}
    {%endif%}
    table tbl_hash2{
        actions = {
            hash2;
        }
        const default_action = hash2();
        size = 1;
    }
    {%if CMUG.type == 1 %}
    {%if CMUG.mau_start >= 0%}
    @pragma stage {{CMUG.mau_start}}
    {%endif%}
    table tbl_hash3{
        actions = {
            hash3;
        }
        const default_action = hash3();
        size = 1;
    }
    {% endif %}

    // Definition for Other Stages of Each CMU (SALU).
    {%for id in range(CMUG.cmu_num) %}
    // Initialization stage of CMU{{id}}.
    action set_cmu{{id+1}}_hkey1_cparam(bit<8> task_id, bit<16> param1, bit<16> param2) {
            meta.cmu_group{{ns.gid}}.cmu{{id+1}}.task_id = task_id;
            {%if CMUG.type == 1 %}
            meta.cmu_group{{ns.gid}}.cmu{{id+1}}.key[15:0] = meta.cmu_group{{ns.gid}}.compressed_key1[15:0];
            {% else %}
            meta.cmu_group{{ns.gid}}.cmu{{id+1}}.key[15:0] = meta.cmu_group{{ns.gid}}.compressed_key1[{{id*8+15}}:{{id*8}}];
            {% endif %}
            meta.cmu_group{{ns.gid}}.cmu{{id+1}}.param.p1 =  param1;
            meta.cmu_group{{ns.gid}}.cmu{{id+1}}.param.p2 =  param2;
    }
    action set_cmu{{id+1}}_hkey2_cparam(bit<8> task_id, bit<16> param1, bit<16> param2) {
            meta.cmu_group{{ns.gid}}.cmu{{id+1}}.task_id = task_id;
            meta.cmu_group{{ns.gid}}.cmu{{id+1}}.key[15:0] = meta.cmu_group{{ns.gid}}.compressed_key2[15:0];
            meta.cmu_group{{ns.gid}}.cmu{{id+1}}.param.p1 =  param1;
            meta.cmu_group{{ns.gid}}.cmu{{id+1}}.param.p2 =  param2;
    }

    {%if CMUG.type == 1 %}
    action set_cmu{{id+1}}_hkey3_cparam(bit<8> task_id, bit<16> param1, bit<16> param2) {
            meta.cmu_group{{ns.gid}}.cmu{{id+1}}.task_id = task_id;
            meta.cmu_group{{ns.gid}}.cmu{{id+1}}.key[15:0] = meta.cmu_group{{ns.gid}}.compressed_key3[15:0];
            meta.cmu_group{{ns.gid}}.cmu{{id+1}}.param.p1 =  param1;
            meta.cmu_group{{ns.gid}}.cmu{{id+1}}.param.p2 =  param2;
    }
    action set_cmu{{id+1}}_hkey12_cparam(bit<8> task_id, bit<16> param1, bit<16> param2) {
            meta.cmu_group{{ns.gid}}.cmu{{id+1}}.task_id = task_id;
            meta.cmu_group{{ns.gid}}.cmu{{id+1}}.key[15:0] = (meta.cmu_group{{ns.gid}}.compressed_key1 ^ meta.cmu_group{{ns.gid}}.compressed_key2)[15:0];
            meta.cmu_group{{ns.gid}}.cmu{{id+1}}.param.p1 =  param1;
            meta.cmu_group{{ns.gid}}.cmu{{id+1}}.param.p2 =  param2;
    }
    action set_cmu{{id+1}}_hkey13_cparam(bit<8> task_id, bit<16> param1, bit<16> param2) {
            meta.cmu_group{{ns.gid}}.cmu{{id+1}}.task_id = task_id;
            meta.cmu_group{{ns.gid}}.cmu{{id+1}}.key[15:0] = (meta.cmu_group{{ns.gid}}.compressed_key1 ^ meta.cmu_group{{ns.gid}}.compressed_key3)[15:0];
            meta.cmu_group{{ns.gid}}.cmu{{id+1}}.param.p1 =  param1;
            meta.cmu_group{{ns.gid}}.cmu{{id+1}}.param.p2 =  param2;
    }
    action set_cmu{{id+1}}_hkey23_cparam(bit<8> task_id, bit<16> param1, bit<16> param2) {
            meta.cmu_group{{ns.gid}}.cmu{{id+1}}.task_id = task_id;
            meta.cmu_group{{ns.gid}}.cmu{{id+1}}.key[15:0] = (meta.cmu_group{{ns.gid}}.compressed_key2 ^ meta.cmu_group{{ns.gid}}.compressed_key3)[15:0];
            meta.cmu_group{{ns.gid}}.cmu{{id+1}}.param.p1 =  param1;
            meta.cmu_group{{ns.gid}}.cmu{{id+1}}.param.p2 =  param2;
    }
    {%endif%}


    action set_cmu{{id+1}}_hkey1_hparam2(bit<8> task_id, bit<16> param2) {
            meta.cmu_group{{ns.gid}}.cmu{{id+1}}.task_id = task_id;
            {%if CMUG.type == 1 %}
            meta.cmu_group{{ns.gid}}.cmu{{id+1}}.key[15:0] = meta.cmu_group{{ns.gid}}.compressed_key1[15:0];
            {% else %}
            meta.cmu_group{{ns.gid}}.cmu{{id+1}}.key[15:0] = meta.cmu_group{{ns.gid}}.compressed_key1[{{id*8+15}}:{{id*8}}];
            {% endif %}
            meta.cmu_group{{ns.gid}}.cmu{{id+1}}.param.p1 =  meta.cmu_group{{ns.gid}}.compressed_key2[15:0];
            meta.cmu_group{{ns.gid}}.cmu{{id+1}}.param.p2 =  param2;
    }

    {%if CMUG.type == 1 %}
    action set_cmu{{id+1}}_hkey1_hparam3(bit<8> task_id, bit<16> param2) {
            meta.cmu_group{{ns.gid}}.cmu{{id+1}}.task_id = task_id;
            meta.cmu_group{{ns.gid}}.cmu{{id+1}}.key[15:0] = meta.cmu_group{{ns.gid}}.compressed_key1[15:0];
            meta.cmu_group{{ns.gid}}.cmu{{id+1}}.param.p1 =  meta.cmu_group{{ns.gid}}.compressed_key3[15:0];
            meta.cmu_group{{ns.gid}}.cmu{{id+1}}.param.p2 =  param2;
    }
    {%endif%}

    action set_cmu{{id+1}}_hkey2_hparam1(bit<8> task_id, bit<16> param2) {
            meta.cmu_group{{ns.gid}}.cmu{{id+1}}.task_id = task_id;
            meta.cmu_group{{ns.gid}}.cmu{{id+1}}.key[15:0] = meta.cmu_group{{ns.gid}}.compressed_key2[15:0];
            meta.cmu_group{{ns.gid}}.cmu{{id+1}}.param.p1 =  meta.cmu_group{{ns.gid}}.compressed_key1[15:0];
            meta.cmu_group{{ns.gid}}.cmu{{id+1}}.param.p2 =  param2;
    }

    {%if CMUG.type == 1 %}
    action set_cmu{{id+1}}_hkey2_hparam3(bit<8> task_id, bit<16> param2) {
            meta.cmu_group{{ns.gid}}.cmu{{id+1}}.task_id = task_id;
            meta.cmu_group{{ns.gid}}.cmu{{id+1}}.key[15:0] = meta.cmu_group{{ns.gid}}.compressed_key2[15:0];
            meta.cmu_group{{ns.gid}}.cmu{{id+1}}.param.p1 =  meta.cmu_group{{ns.gid}}.compressed_key3[15:0];
            meta.cmu_group{{ns.gid}}.cmu{{id+1}}.param.p2 =  param2;
    }
    action set_cmu{{id+1}}_hkey3_hparam1(bit<8> task_id, bit<16> param2) {
            meta.cmu_group{{ns.gid}}.cmu{{id+1}}.task_id = task_id;
            meta.cmu_group{{ns.gid}}.cmu{{id+1}}.key[15:0] = meta.cmu_group{{ns.gid}}.compressed_key3[15:0];
            meta.cmu_group{{ns.gid}}.cmu{{id+1}}.param.p1 =  meta.cmu_group{{ns.gid}}.compressed_key1[15:0];
            meta.cmu_group{{ns.gid}}.cmu{{id+1}}.param.p2 =  param2;
    }
    action set_cmu{{id+1}}_hkey3_hparam2(bit<8> task_id, bit<16> param2) {
            meta.cmu_group{{ns.gid}}.cmu{{id+1}}.task_id = task_id;
            meta.cmu_group{{ns.gid}}.cmu{{id+1}}.key[15:0] = meta.cmu_group{{ns.gid}}.compressed_key3[15:0];
            meta.cmu_group{{ns.gid}}.cmu{{id+1}}.param.p1 =  meta.cmu_group{{ns.gid}}.compressed_key2[15:0];
            meta.cmu_group{{ns.gid}}.cmu{{id+1}}.param.p2 =  param2;
    }

    {%endif%}

    // There are some special (i.e., from standard metadata) params here.
    // We support them fragmentary among CMU-Groups to save PHV resources.
    {%if CMUG.type == 2 %}
    {% for pram_name, param_val in CMUG.std_params.items() %}
    action set_cmu{{id+1}}_hkey1_{{pram_name}}(bit<8> task_id, bit<16> param2) {
            meta.cmu_group{{ns.gid}}.cmu{{id+1}}.task_id = task_id;
            meta.cmu_group{{ns.gid}}.cmu{{id+1}}.key[15:0] = meta.cmu_group{{ns.gid}}.compressed_key1[{{id*8+15}}:{{id*8}}];
            meta.cmu_group{{ns.gid}}.cmu{{id+1}}.param.p1 =  {{param_val}};
            meta.cmu_group{{ns.gid}}.cmu{{id+1}}.param.p2 =  param2;
    }
    action set_cmu{{id+1}}_hkey2_{{pram_name}}(bit<8> task_id, bit<16> param2) {
            meta.cmu_group{{ns.gid}}.cmu{{id+1}}.task_id = task_id;
            meta.cmu_group{{ns.gid}}.cmu{{id+1}}.key[15:0] = meta.cmu_group{{ns.gid}}.compressed_key2[15:0];
            meta.cmu_group{{ns.gid}}.cmu{{id+1}}.param.p1 =  {{param_val}};
            meta.cmu_group{{ns.gid}}.cmu{{id+1}}.param.p2 =  param2;
    }
    {% endfor %}
    {%endif%}
    
    {%if CMUG.mau_start >= 0%}
    @pragma stage {{CMUG.mau_start+1}}
    {%endif%}
    table tbl_cmu{{id+1}}_initialization {
        key = {
            // Here we use IP Pair as the filter.
            hdr.ipv4.src_addr : ternary;
            hdr.ipv4.dst_addr : ternary;
            // Other fields can be added here.
            // We only use the filter in the initialization stage, and select a task id.
            // We use task_id to identify tasks to save TCAM resources in the initialization stage.
        }
        actions = {
            set_cmu{{id+1}}_hkey1_cparam;
            set_cmu{{id+1}}_hkey2_cparam;
            {%if CMUG.type == 1 %}
            set_cmu{{id+1}}_hkey3_cparam;
            set_cmu{{id+1}}_hkey12_cparam;
            set_cmu{{id+1}}_hkey13_cparam;
            set_cmu{{id+1}}_hkey23_cparam;
            {%endif%}

            set_cmu{{id+1}}_hkey1_hparam2;
            {%if CMUG.type == 1 %}
            set_cmu{{id+1}}_hkey1_hparam3;
            {%endif%}

            set_cmu{{id+1}}_hkey2_hparam1;
            {%if CMUG.type == 1 %}
            set_cmu{{id+1}}_hkey2_hparam3;
            {%endif%}


            {%if CMUG.type == 1 %}
            set_cmu{{id+1}}_hkey3_hparam1;
            set_cmu{{id+1}}_hkey3_hparam2;
            {%endif%}

            {%if CMUG.type == 2 %}
            {% for pram_name, param_val in CMUG.std_params.items() %}
            set_cmu{{id+1}}_hkey1_{{pram_name}};
            {% endfor %}
            {%endif%}
        }
        size = 32;
    }

    // Pre-processing stage of CMU{{id}}.
    action process_cmu{{id+1}}_key_param(bit<16> offset, bit<16> code){
        meta.cmu_group{{ns.gid}}.cmu{{id+1}}.key = meta.cmu_group{{ns.gid}}.cmu{{id+1}}.key + offset; // Implementing '-' by '+' overflow.
        meta.cmu_group{{ns.gid}}.cmu{{id+1}}.param.p1 = code;
    }
    action process_cmu{{id+1}}_key(bit<16> offset){
        meta.cmu_group{{ns.gid}}.cmu{{id+1}}.key = meta.cmu_group{{ns.gid}}.cmu{{id+1}}.key + offset; // Implementing '-' by '+' overflow.
    }
    {%if CMUG.mau_start >= 0%}
    @pragma stage {{CMUG.mau_start+2}}
    {%endif%}
    table tbl_cmu{{id+1}}_preprocessing {
        key = {
            meta.cmu_group{{ns.gid}}.cmu{{id+1}}.task_id : exact;
            meta.cmu_group{{ns.gid}}.cmu{{id+1}}.key     : ternary;
            meta.cmu_group{{ns.gid}}.cmu{{id+1}}.param.p1  : ternary;
        }
        actions = {
            no_action;
            process_cmu{{id+1}}_key;
            process_cmu{{id+1}}_key_param;
        }
        const default_action = no_action();
        size = 1024;
    }

    // Operation stage of CMU{{id}}.
    Register<bit<16>, bit<16>>({{CMUG.cmu_size}}, 0) cmu{{id+1}}_buckets; 
    RegisterAction<bit<16>, bit<16>, bit<16>>(cmu{{id+1}}_buckets) cmu{{id+1}}_op_cond_add = {
        void apply(inout bit<16> value, out bit<16> result) {
            result = 0;
            if(value < meta.cmu_group{{ns.gid}}.cmu{{id+1}}.param.p2){
                value = value |+| meta.cmu_group{{ns.gid}}.cmu{{id+1}}.param.p1;
            }
            result = value;
        }
    };
    RegisterAction<bit<16>, bit<16>, bit<16>>(cmu{{id+1}}_buckets) cmu{{id+1}}_op_max = {
        void apply(inout bit<16> value, out bit<16> result) {
            result = 0;
            if(value < meta.cmu_group{{ns.gid}}.cmu{{id+1}}.param.p1){
                value = meta.cmu_group{{ns.gid}}.cmu{{id+1}}.param.p1;
                result = value;
            }
        }
    };
    RegisterAction<bit<16>, bit<16>, bit<16>>(cmu{{id+1}}_buckets) cmu{{id+1}}_op_and_or = {
        void apply(inout bit<16> value, out bit<16> result) {
            if(meta.cmu_group{{ns.gid}}.cmu{{id+1}}.param.p2 == 1) // bitwise_and
            {
                value = meta.cmu_group{{ns.gid}}.cmu{{id+1}}.param.p1 & value;
            }
            else{           // bitwise_or
                value = meta.cmu_group{{ns.gid}}.cmu{{id+1}}.param.p1 | value;
            }
            result = value;
        }
    };

    //RegisterAction<bit<16>, bit<16>, bit<16>>(cmu{{id+1}}_buckets) cmu{{id+1}}_op_reserved = {
    //    void apply(inout bit<16> value, out bit<16> result) {
    //        // Reserved stateful operation.
    //       result = value;
    //    }
    //};

    action op_cmu{{id+1}}_cond_add(){
        meta.cmu_group{{ns.gid}}.cmu{{id+1}}.param.p2 = cmu{{id+1}}_op_cond_add.execute((bit<16>)meta.cmu_group{{ns.gid}}.cmu{{id+1}}.key[{{CMUG.key_bitw-1}}:0]);
    }
    action op_cmu{{id+1}}_and_or(){
        meta.cmu_group{{ns.gid}}.cmu{{id+1}}.param.p2 = cmu{{id+1}}_op_and_or.execute((bit<16>)meta.cmu_group{{ns.gid}}.cmu{{id+1}}.key[{{CMUG.key_bitw-1}}:0]);
    }
    action op_cmu{{id+1}}_max(){
        meta.cmu_group{{ns.gid}}.cmu{{id+1}}.param.p2 = cmu{{id+1}}_op_max.execute((bit<16>)meta.cmu_group{{ns.gid}}.cmu{{id+1}}.key[{{CMUG.key_bitw-1}}:0]);
    }

    //action op_cmu{{id+1}}_reserved(){
    //    meta.cmu_group{{ns.gid}}.cmu{{id+1}}.param.p2 = cmu{{id+1}}_op_reserved.execute((bit<16>)meta.cmu_group{{ns.gid}}.cmu{{id+1}}.key[{{CMUG.key_bitw-1}}:0]);
    //}

    {%if CMUG.mau_start >= 0%}
    @pragma stage {{CMUG.mau_start+3}}
    {%endif%}
    table tbl_cmu{{id+1}}_operation {
        key = {
            meta.cmu_group{{ns.gid}}.cmu{{id+1}}.task_id : exact;
        }
        actions = {
            op_cmu{{id+1}}_cond_add;
            op_cmu{{id+1}}_and_or;
            op_cmu{{id+1}}_max;
            // op_cmu{{id+1}}_reserved;
        }
        size = 32;
    }
    {% endfor %}

    apply {
        // Shared Compression Stage for CMUG{{ns.gid}}.
        tbl_hash1.apply(); 
        tbl_hash2.apply(); 
        {%if CMUG.type == 1 %}
        tbl_hash3.apply(); 
        {% endif %}

        {%for id in range(CMUG.cmu_num) %}
        // Initialization, Pre-processing, operation stages for CMU{{id+1}} in CMUG{{ns.gid}}.
        tbl_cmu{{id+1}}_initialization.apply();
        tbl_cmu{{id+1}}_preprocessing.apply();
        tbl_cmu{{id+1}}_operation.apply();
        {% endfor %}
    }
}
{% endfor %}
#endif