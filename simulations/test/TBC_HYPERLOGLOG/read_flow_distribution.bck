
#include <unordered_map>
// #include "tbc/tbc_manager.h"
#include "DataTrace.h"
#include "EMFSD.h"
#include <fstream>
#include <ctime>
#include "HowLog/HowLog.h"
#include <algorithm>
#include <bitset>
#include "CommonFunc.h"


#define FILE_MRAC_DSITRIBUTION "flow_distribution0.25.txt"  //1MB
#define TEST_NUM  30

vector<double> dist;


int main(){
    clock_t start = clock();
    DataTrace trace;
    // trace.LoadFromFile("../data/WIDE/one_sec_15.dat");
    // trace.LoadFromFile("../data/WIDE/head1000.dat");
    // trace.LoadFromFile("../data/WIDE/test.dat");
    // trace.LoadFromFile("../data/WIDE/ten_sec_1.dat");
    trace.LoadFromFile("../data/WIDE/fifteen1.dat");

    unordered_map<string, int> Real_Freq;
    for (auto it=trace.begin(); it!=trace.end(); ++it){
        // tbc_manager.apply(*it);
        string str((const char*)((*it)->getFlowKey_IPPair()), 8);
        Real_Freq[str]++;
    } 

    // Load distribution.
    ifstream infile;
	infile.open(FILE_MRAC_DSITRIBUTION, ios::in);
	//第五种读取方法
	string s;
	getline(infile,s);
	infile >> s;
    Split_String_Double(s, dist, " ");
    int real = Real_Freq.size();
    int estimate = 0;
    for(auto& item : dist){
        estimate += item;
    }
    double RE = abs(real - estimate) / (double)real;
    HOW_LOG(L_INFO, "Load MRAC flow distribution %s, estimate c %d, real c %d, RE %.2f", FILE_MRAC_DSITRIBUTION, estimate, real, RE);
}