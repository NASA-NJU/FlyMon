
#include <unordered_map>
#include "tbc/tbc_manager.h"
#include "DataTrace.h"
#include <ctime>
#include <fstream>

#define TEST_MEMORY 0.4
#define HH_THRESHOLD 0.0001

// Dataplane config.
const uint32_t BLOCK_BYTES = TEST_MEMORY * 1048576/3;
const uint32_t TBC_NUM = 1;
const uint32_t BLOCK_NUM = 3;
const uint32_t BLOCK_SIZE = BLOCK_BYTES/4;

// CM Sketch config.
const uint32_t TOTAL_MEM = TEST_MEMORY * 1048576;
const uint32_t d = 3;
const uint32_t w = TOTAL_MEM / 3 / 4;

#define FILE_MRAC_DSITRIBUTION "flow_distribution1.0.txt"  //1MB

vector<double> dist(1000, 0);

long long C(int n, int m)  //n>m
{
	if (m < n - m) m = n - m;
	long long ans = 1;
	for (int i = m + 1; i <= n; i++) ans *= i;
	for (int i = 1; i <= n - m; i++) ans /= i;
	return ans;
}

double BinomialDistribution(double n, double x, double p){
    double pp = static_cast<double>(C(n,x)) * pow(p, x) * pow(1-p, n-x);
    // HOW_LOG(L_DEBUG, "%.0f 个球，每个球拿的概率为 %f, 则最终有 %.0f 个球的概率为: %f", n, p, x, pp);
    return pp;
}

double Back2N(double x, double p){
    double threshold = 71;
    double select_n = -1;
    double n_max = -1;
    for(double i=x; i<threshold; ++i){
        double pp = BinomialDistribution(i, x, p) * dist[i];
        if(pp > n_max){
            n_max = pp;
            select_n = i;
        }
    }
    return select_n;
}

// nt get_address(int task_id, int tbc_id, int block_id, const char* key, int key_len){
// TOdo::还差地址映射的修改
uint32_t count_min( TBC_Manager<TBC_NUM, BLOCK_NUM, BLOCK_SIZE>& manager,
                    int task_id,
                    map<uint32_t, map<uint32_t, vector<uint32_t>>>& sketch,
                    const uint8_t* key,
                    int key_len, int coff)
{
    uint32_t min = 0x1f1f1f1f;
    for(auto& tbc : sketch){ // tbc, block, coin, data.
        uint32_t tbc_id = tbc.first;
        double value = 0.0;
        for(auto& block : tbc.second){
            uint32_t block_id = block.first;
            uint32_t address = manager.get_address(task_id, tbc_id, block_id, key, key_len);
            if(sketch[tbc_id][block_id][address] < 9){
                value = Back2N(sketch[tbc_id][block_id][address],  1/(1.0*coff) );
            }
            else{
                value = coff * sketch[tbc_id][block_id][address];
            }
            // value = coff * sketch[tbc_id][block_id][address];
            if(value < min)
                min = value;
        }
    }
    if(min == 0x1f1f1f1f)
        min = 0;
    return min;
}

vector<double> measure_main(DataTrace& trace, TBC_Manager<TBC_NUM, BLOCK_NUM, BLOCK_SIZE>& tbc_manager, string coin, int coff){
    // HOW_LOG(L_INFO, "Construct CM Sketch on TBC, Total Memory %d, %d rows, each with %d counters.", TOTAL_MEM, d, w);
    FTupleMatch* filter = new FTupleMatch("*.*.*.*", "*.*.*.*", "*", "*", "*");
    int task_id = tbc_manager.allocate_cmsketch(d, w, filter, ACTION_SET_KEY_IPPAIR, ACTION_SET_VAL_CONST, coin);
    if(task_id < 0){
        return {0,0,0,0};
    }
    unordered_map<string, int> Real_Freq;
    
    for (auto it=trace.begin(); it!=trace.end(); ++it){
        tbc_manager.apply(*it);
        string str((const char*)((*it)->getFlowKey_IPPair()), 8);
        Real_Freq[str]++;
    }

    map<uint32_t, map<uint32_t, vector<uint32_t>>> sketch; //tbc, block, array.
    map<uint32_t, map<uint32_t, BOBHash32*>>  key_hashes;   //tbc, block, array.
    tbc_manager.query(task_id, sketch);

    vector< pair<string, int> > Esti_HH;
    vector< pair<string, int> > Real_HH;
    double temp_relation_error_sum = 0;
    for (auto& item : Real_Freq){
        string key = item.first;
 		int estimate = count_min(tbc_manager, task_id, sketch, (const uint8_t *)key.c_str(), 8, coff);
		double relative_error = abs(item.second - estimate) / (double)item.second;
        if(item.second > HH_THRESHOLD*trace.size()){
            Real_HH.push_back(make_pair(key, item.second));
        }
        if(estimate > HH_THRESHOLD*trace.size()){
            Esti_HH.push_back(make_pair(key, estimate));
        }
		temp_relation_error_sum += relative_error;
        HOW_LOG(L_DEBUG, "Flow %s=>%s, real=%d, estimate=%d.", TracePacket::bytes_to_ip_str((uint8_t*)item.first.c_str()).c_str(), 
                                     TracePacket::bytes_to_ip_str((uint8_t*)item.first.c_str()+4).c_str(), item.second, estimate);   
    }

    int estimate_right = 0;
    double hh_relative_error_sum = 0;
    for(int i = 0; i < (int)Esti_HH.size(); ++i)
    {
        string key = Esti_HH[i].first;
        // HOW_LOG(L_DEBUG, "<%s, %d>", TracePacket::b, est_heavy_hitters[i].second); 
        for(int j = 0; j < (int)Real_HH.size(); ++j)
        {
            if(Real_HH[j].first == key){
                hh_relative_error_sum +=  abs(Real_HH[j].second - Esti_HH[i].second) / (double)Real_HH[j].second;
                // HOW_LOG(L_DEBUG, "Heavy Hitter %d, Real %d, Estimate %d", j, Real_HH[j].second, Esti_HH[i].second); 
                estimate_right += 1;
                break;
            }
        }
    }
    double precision =  (double)estimate_right / (double)Esti_HH.size();
    double recall = (double)estimate_right / (double)Real_HH.size();
    double f1 = (2 * precision * recall) / (precision + recall);
    // HOW_LOG(L_DEBUG, "Real Heavyhitter = %d, Estimate Heavyhitter = %d, PR = %.2f, RR = %.2f, F1 Score = %.2f", Real_HH.size(), Esti_HH.size(), precision, recall, f1); 
    delete filter;
    return {temp_relation_error_sum/Real_Freq.size(), precision, recall, f1, hh_relative_error_sum/estimate_right};
    // HOW_LOG(L_DEBUG, "Total %d packets, %d flows, ARE = %f", trace.size(), 
    //                 Real_Freq.size(), 
    //                 temp_relation_error_sum/Real_Freq.size());
}

int main(){

    clock_t start = clock();
    DataTrace trace;
    // trace.LoadFromFile("../data/WIDE/one_sec_15.dat");
    // trace.LoadFromFile("../data/WIDE/head1000.dat");
    // trace.LoadFromFile("../data/WIDE/test.dat");
    // trace.LoadFromFile("../data/WIDE/ten_sec_1.dat");
    trace.LoadFromFile("../data/WIDE/fifteen1.dat");
    HOW_LOG(L_INFO, "Dataplane Info: %d TBC, each with %d block, each block contains %d counters, TOTAL %.2fM Bytes.", TBC_NUM, BLOCK_NUM, BLOCK_SIZE, TEST_MEMORY);

    ifstream infile;
	infile.open(FILE_MRAC_DSITRIBUTION, ios::in);
	//第五种读取方法
	string s;
	getline(infile,s);
	infile >> s;
    Split_String_Double(s, dist, " ");
    HOW_LOG(L_INFO, "Load MRAC flow distribution %s, size %d, total num %.2f", FILE_MRAC_DSITRIBUTION, dist.size());

    auto& tbc_manager = TBC_Manager<TBC_NUM, BLOCK_NUM, BLOCK_SIZE>::getDataplane();
    vector<string> coins = {"000", "0**", "00*", "000"};
    vector<int>    coffs = {8, 2, 4, 8};
    vector<vector<vector<double>>> ares;
    for(int t=0; t<1; ++t){
        string coin = coins[t];
        int coff = coffs[t];
        vector<vector<double>> results;
        for(int i=0; i<1; ++i){
            HOW_LOG(L_INFO, "### Run Coin %s Test %d...", coin.c_str(), i+1);
            vector<double> result = measure_main(trace, tbc_manager, coin, coff);
            results.push_back(result);
            tbc_manager.reset();
        }
        ares.push_back(results);
    }
    clock_t ends = clock();
    for(int i=0; i<ares.size(); ++i){
        HOW_LOG(L_DEBUG, "Coin %s, Average Relative of %d tests:", coins[i].c_str(), ares[i].size());
        for(int j=0; j<ares[i].size(); ++j){
            HOW_LOG(L_INFO, "Test %d, ARE (all flow) %.2f, HH Precision %.2f, HH Recall %.2f, F1 Score %.2f, ARE (hh) %.2f", 
                    j, ares[i][j][0], ares[i][j][1], ares[i][j][2], ares[i][j][3], ares[i][j][4]);
        }
    }
    cout <<"Running Time : "<<(double)(ends - start)/ CLOCKS_PER_SEC << endl;
}